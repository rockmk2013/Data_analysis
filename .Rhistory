colnames(fa_store) <- c("Store","F1","F2")
fa_store$F1 <- scorescale(fa_store$F1)
fa_store$F2 <- scorescale(fa_store$F2)
fa_store$group <- addgroup(fa_store)
x_med <- median(fa_store$F1)
x_min <- min(fa_store$F1)
x_max <- max(fa_store$F1)
x_width <- max(x_max - x_med, x_med - x_min)
y_med <- median(fa_store$F2)
y_min <- min(fa_store$F2)
y_max <- max(fa_store$F2)
y_width <- max(y_max - y_med, y_med - y_min)
fa_store_plot <- ggplot(fa_store,aes(x=F1, y=F2, colour=factor(group))) + geom_point(aes(size = 1.5)) + geom_label(aes(label=Store),hjust=0.5,vjust=1) + xlab("FA1") + ylab("FA2")
fa_store_plot <- fa_store_plot + scale_x_continuous(limits = c(x_med - x_width,x_med + x_width))
fa_store_plot <- fa_store_plot + scale_y_continuous(limits = c(y_med - y_width,y_med + y_width))
fa_store_plot <- fa_store_plot + geom_vline(xintercept = median(fa_store$F1)) + geom_hline(yintercept = median(fa_store$F2))
fa_store_plot <- fa_store_plot + theme(legend.position="none",axis.title = element_text(size=16,family = "BL"),axis.text = element_text(size = 16))
return(fa_store_plot)
}
storesummary <- function(df, group, selection){
return(df %>% group_by_(group) %>% dplyr::select(one_of(selection)) %>% summarise_all(funs(mean)))
}
multistoremean <- function(multi){
group <- "Store"
selection <- c("Store","Traffic Conversion","Sales Conversion", "ATV", "UPT","ACV","Potential Shopper","Avg. Shopper Dwell","Repeat Customer")
multi_mean <- storesummary(multi, group, selection)
# Set name of stores
store_name <- as.character(unique(multi$Store))
multi_mean[,1] <- store_name
return(multi_mean)
}
multi_mean <- multistoremean(multi)
store_name <- as.character(unique(multi$Store))
multi_mean <- multi_mean[,-1]
multi_mean <- multi_mean[,colSums(multi_mean) > 0]
multi_mean
multi_mean_table <- data.frame(store_name,round(multi_mean,2))
View(multi_mean_table)
M <- cor(multi_mean)
corrplot(M,method="color",type="lower")
fa.parallel(multi_mean)
multi_scree_plot <- recordPlot()
fa <- fa(multi_mean,nfactors = 2, residuals = TRUE, scores = "tenBerge",fm = ifelse(det(cor(multi_mean)) < exp(-18),"minres","mle"))
metrics <- colnames(multi_mean)
loading <- data.frame(cbind(metrics,xtable(unclass(fa$loadings))))
rownames(loading) <- NULL
colnames(loading) <- c("Metrics","Factor 1","Factor 2")
loading.m <- melt(loading, id="Metrics", measure=c("Factor 1","Factor 2"))
fa_plot <- ggplot(loading.m, aes(Metrics, abs(value), fill=value)) +
facet_wrap(~ variable) + geom_bar(stat="identity") + coord_flip() +
scale_fill_gradient2(name = "Loading",
high = "blue", mid = "white", low = "red",
midpoint=0, guide="colourbar") +
ylab("Loading Strength") +
theme_bw(base_size=14)
fa_plot
runApp('GitHub/Data_analysis')
multi_mean_table
colnames(multi_mean_table)
View(multi)
multi_mean_table <- data.frame(store_name,round(multi_mean,2),check.names = FALSE)
View(multi_mean_talbe)
View(multi_mean_table)
View(multi_mean)
loading
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
multi_mean
View(multi_mean)
store_name <- as.character(unique(multi$Store))
store_name
multi_mean <- multi_mean[,-1]
View(multi_mean)
multi_mean <- multistoremean(multi)
View(multi_mean)
View(multi_mean_table)
M <- cor(multi_mean)
corrplot(M,method="color",type="lower")
M <- cor(multi_mean)
M <- cor(multi_mean)
View(multi_mean)
summary(multi_mean)
multi_mean <- multi_mean[,-1]
multi_mean <- multi_mean[,colSums(multi_mean) > 0]
M <- cor(multi_mean)
corrplot(M,method="color",type="lower")
runApp('GitHub/Data_analysis')
read.table("C:/Users/user/Desktop/skyREC/demo/data/new_data/multi_eng_holiday.csv",sep=",",header=TRUE,encoding="big5",check.names = FALSE)
multi = read.table("C:/Users/user/Desktop/skyREC/demo/data/new_data/multi_eng_holiday.csv",sep=",",header=TRUE,encoding="big5",check.names = FALSE)
View(multi)
multi <- input$multi
scorescale <- function(x){sqrt((x-min(x))/(max(x)-min(x)))}
addgroup <- function(fa_store){
group <- c()
x_med <- median(fa_store$F1)
y_med <- median(fa_store$F2)
for(i in 1:nrow(fa_store)){
if(fa_store$F1[i] > x_med && fa_store$F2[i] > y_med){
group[i] <- 1
}
else if(fa_store$F1[i] > x_med && fa_store$F2[i] <= y_med){
group[i] <- 2
}
else if(fa_store$F1[i] <= x_med && fa_store$F2[i] > y_med){
group[i] <- 3
}
else if(fa_store$F1[i] <= x_med && fa_store$F2[i] <= y_med){
group[i] <- 4
}
}
return(group)
}
store_to_plot <- function(fa_store){
rownames(fa_store) <- NULL
colnames(fa_store) <- c("Store","F1","F2")
fa_store$F1 <- scorescale(fa_store$F1)
fa_store$F2 <- scorescale(fa_store$F2)
fa_store$group <- addgroup(fa_store)
x_med <- median(fa_store$F1)
x_min <- min(fa_store$F1)
x_max <- max(fa_store$F1)
x_width <- max(x_max - x_med, x_med - x_min)
y_med <- median(fa_store$F2)
y_min <- min(fa_store$F2)
y_max <- max(fa_store$F2)
y_width <- max(y_max - y_med, y_med - y_min)
fa_store_plot <- ggplot(fa_store,aes(x=F1, y=F2, colour=factor(group))) + geom_point(aes(size = 1.5)) + geom_label(aes(label=Store),hjust=0.5,vjust=1) + xlab("FA1") + ylab("FA2")
fa_store_plot <- fa_store_plot + scale_x_continuous(limits = c(x_med - x_width,x_med + x_width))
fa_store_plot <- fa_store_plot + scale_y_continuous(limits = c(y_med - y_width,y_med + y_width))
fa_store_plot <- fa_store_plot + geom_vline(xintercept = median(fa_store$F1)) + geom_hline(yintercept = median(fa_store$F2))
fa_store_plot <- fa_store_plot + theme(legend.position="none",axis.title = element_text(size=16,family = "BL"),axis.text = element_text(size = 16))
return(fa_store_plot)
}
storesummary <- function(df, group, selection){
return(df %>% group_by_(group) %>% dplyr::select(one_of(selection)) %>% summarise_all(funs(mean)))
}
multistoremean <- function(multi){
group <- "Store"
selection <- c("Store","Traffic Conversion","Sales Conversion", "ATV", "UPT","ACV","Potential Shopper","Avg. Shopper Dwell","Repeat Customer")
multi_mean <- storesummary(multi, group, selection)
return(multi_mean)
}
multi_mean <- multistoremean(multi)
store_name <- as.character(unique(multi$Store))
View(multi_mean)
multi_mean <- multi_mean[,-1]
multi_mean <- multi_mean[,colSums(multi_mean) > 0]
View(multi_mean)
multi_mean_table <- data.frame(store_name,round(multi_mean,2),check.names = FALSE)
View(multi_mean_table)
M <- cor(multi_mean)
corrplot(M,method="color",type="lower")
runApp('GitHub/Data_analysis')
colnames(multi)
runApp('GitHub/Data_analysis')
multi
multi$`Instore Traffic`
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
multi_mean <- multistoremean(multi)
store_name <- as.character(unique(multi$Store))
multi_mean <- multi_mean[,-1]
multi_mean <- multi_mean[,colSums(multi_mean) > 0]
M <- cor(multi_mean)
corrplot(M,method="color",type="lower")
corplot <- recordPlot()
M <- cor(multi_mean)
corrplot(M,method="color",type="lower")
runApp('GitHub/Data_analysis')
shiny::runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
read.table("C:/Users/user/Desktop/skyREC/demo/data/new_data/multi_eng_holiday.csv",sep=",",header=TRUE,encoding="big5",check.names = FALSE)
multi = read.table("C:/Users/user/Desktop/skyREC/demo/data/new_data/multi_eng_holiday.csv",sep=",",header=TRUE,encoding="big5",check.names = FALSE)
dea_calculate <- function(multi,multi_mean){
# mean_table
mean_table <- multi_mean
mean_table[,-1] <- round(mean_table[,-1], digits = 2)
rownames(mean_table) <- NULL
store_name <- as.character(unique(multi$Store))
multi_mean <- data.frame(apply(multi_mean[,-1],2,function(x) x / mean(x)))
X=matrix(multi_mean$mean_instore,ncol=1)
Y=cbind(multi_mean$mean_revenue,multi_mean$mean_transaction)
# frontier
# frontier <- dea.plot.frontier(X,Y,txt=store_name,col="red", RTS="vrs",lwd=3)
# frontier <- frontier + dea.plot.frontier(X,Y,txt=store_name,col="red", RTS="crs",lwd=3,add=TRUE,lty="dashed")
#
# store_full
crs <- 1 / eff(dea(X,Y,RTS = "crs",ORIENTATION = "out"))
vrs <- 1 / eff(dea(X,Y,RTS = "vrs",ORIENTATION = "out"))
store_full <- data.frame(cbind(store_name,crs,vrs))
colnames(store_full) <- c("StoreName","CRS","VRS")
rownames(store_full) <- NULL
#p <- recordPlot()
# multi_cv_plot
store_full_new <- melt(store_full, id.vars = 'StoreName')
store_full_new$value <- as.numeric(store_full_new$value)
cv_plot <- ggplot(store_full_new, aes(x=as.factor(StoreName), y=value, fill=variable)) +
geom_bar(stat='identity', position='dodge') + xlab("店名") +
ylab("效率值")+ scale_y_continuous(breaks=seq(0,1,0.1)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title  = element_text(size=16,family = "BL"),
legend.title = element_text(family = "BL")
) +
scale_fill_discrete(name = "方法")
return(  list("mean_table" = mean_table,
#"frontier" = p,
"store_full" = store_full,
"cv_plot" = cv_plot))
}
storesummary <- function(df, group, selection){
return(df %>% group_by_(group) %>% dplyr::select(one_of(selection)) %>% summarise_all(funs(mean)))
}
findmean <- function(multi){
group <- "Store"
selection <- c("Store","InstoreTraffic","Revenue","Transaction")
multistore_dea <- storesummary(multi, group, selection)
colnames(multistore_dea) <- c("Storename", "MeanInstore", "MeanRevenue", "MeanTransaction")
multi_workingday <- filter(multi,SpecialVacation !=1,ConsistentVacation !=1, NormalVacation !=1)
multi_holiday <- filter(multi,SpecialVacation ==1 | ConsistentVacation ==1 | NormalVacation ==1)
multistore_workingday <- storesummary(multi_workingday, group, selection)
multistore_holiday <- storesummary(multi_holiday, group, selection)
colnames(multistore_workingday) <- c("Storename", "MeanInstore", "MeanRevenue", "MeanTransaction")
colnames(multistore_holiday) <-c("Storename", "MeanInstore", "MeanRevenue", "MeanTransaction")
output <- list(multistore_dea = multistore_dea, multistore_workingday = multistore_workingday, multistore_holiday = multistore_holiday)
return(output)
}
multi$Revenue = as.numeric(gsub(",","",as.character(multi$Revenue)))
multi$ATV = as.numeric(gsub(",","",as.character(multi$ATV)))
multidata <- findmean(multi)
multi_all_mean <- multidata$multistore_dea
multi_workingday_mean <- multidata$multistore_workingday
multi_holiday_mean <- multidata$multistore_holiday
all <- dea_calculate(multi, multi_all_mean)
workingday <- dea_calculate(multi, multi_workingday_mean)
multi_mean =multi_all_mean
mean_table <- multi_mean
mean_table[,-1] <- round(mean_table[,-1], digits = 2)
rownames(mean_table) <- NULL
store_name <- as.character(unique(multi$Store))
multi_mean <- data.frame(apply(multi_mean[,-1],2,function(x) x / mean(x)))
X=matrix(multi_mean$mean_instore,ncol=1)
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
shiny::runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
multi = read.table("C:/Users/user/Desktop/skyREC/demo/data/VF/hua_tai_multi_2_new.csv",sep=",",header = TRUE,encoding = "big5")
fqastoresummary <- function(df, group, selection){
return(df %>% group_by_(group) %>% dplyr::select(one_of(selection)) %>% summarise_all(funs(mean)))
}
findfqamean <- function(multi){
# Get mean of columns from multistore data grouped by store number
group <- "Store"
selection <- c("Store","InstoreTraffic","Revenue")
store_name <- as.character(unique(multi$Store))
# Seperate multistore data into workingdays and holidays
multi_workingday <- filter(multi,SpecialVacation !=1,ConsistentVacation !=1,NormalVacation !=1)
multi_holiday <- filter(multi,SpecialVacation ==1 |  ConsistentVacation ==1 |NormalVacation ==1)
# Get mean of columns by weekdays and weekends grouped by store number
multistore_workingday <- fqastoresummary(multi_workingday, group, selection)
multistore_holiday <- fqastoresummary(multi_holiday, group, selection)
multistore_weekdays <- cbind(store_name,multistore_workingday[,-1], multistore_holiday[,-1])
colnames(multistore_weekdays) <- c("storename","mean_instore_workingday", "mean_sales_workingday", "mean_instore_holiday", "mean_sales_holiday")
output <- list (multistore_weekdays = multistore_weekdays)
return(output)
}
multidata <- findfqamean(multi)
multi = data.frame(multidata)
multi[,1]
c(1:length(multi[,1]))
multi
multi[,1]
sort(unique(multi[,1]))
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
read.table("C:/Users/user/Desktop/skyREC/demo/data/VF/hua_tai_multi_2_new.csv",sep=",",header=TRUE,encoding="big5")
multi = read.table("C:/Users/user/Desktop/skyREC/demo/data/VF/hua_tai_multi_2_new.csv",sep=",",header=TRUE,encoding="big5")
View(multi)
multi_test = read.table("C:/Users/user/Desktop/skyREC/demo/data/new_data/multi_eng_holiday.csv",sep=",",header=TRUE,encoding="big5")
View(multi_test)
multi_mean <- multistoremean(multi)
scorescale <- function(x){sqrt((x-min(x))/(max(x)-min(x)))}
addgroup <- function(fa_store){
group <- c()
x_med <- median(fa_store$F1)
y_med <- median(fa_store$F2)
for(i in 1:nrow(fa_store)){
if(fa_store$F1[i] > x_med && fa_store$F2[i] > y_med){
group[i] <- 1
}
else if(fa_store$F1[i] > x_med && fa_store$F2[i] <= y_med){
group[i] <- 2
}
else if(fa_store$F1[i] <= x_med && fa_store$F2[i] > y_med){
group[i] <- 3
}
else if(fa_store$F1[i] <= x_med && fa_store$F2[i] <= y_med){
group[i] <- 4
}
}
return(group)
}
store_to_plot <- function(fa_store){
rownames(fa_store) <- NULL
colnames(fa_store) <- c("Store","F1","F2")
fa_store$F1 <- scorescale(fa_store$F1)
fa_store$F2 <- scorescale(fa_store$F2)
fa_store$group <- addgroup(fa_store)
x_med <- median(fa_store$F1)
x_min <- min(fa_store$F1)
x_max <- max(fa_store$F1)
x_width <- max(x_max - x_med, x_med - x_min)
y_med <- median(fa_store$F2)
y_min <- min(fa_store$F2)
y_max <- max(fa_store$F2)
y_width <- max(y_max - y_med, y_med - y_min)
fa_store_plot <- ggplot(fa_store,aes(x=F1, y=F2, colour=factor(group))) + geom_point(aes(size = 1.5)) + geom_label(aes(label=Store),hjust=0.5,vjust=1) + xlab("FA1") + ylab("FA2")
fa_store_plot <- fa_store_plot + scale_x_continuous(limits = c(x_med - x_width,x_med + x_width))
fa_store_plot <- fa_store_plot + scale_y_continuous(limits = c(y_med - y_width,y_med + y_width))
fa_store_plot <- fa_store_plot + geom_vline(xintercept = median(fa_store$F1)) + geom_hline(yintercept = median(fa_store$F2))
fa_store_plot <- fa_store_plot + theme(legend.position="none",axis.title = element_text(size=16,family = "BL"),axis.text = element_text(size = 16))
return(fa_store_plot)
}
storesummary <- function(df, group, selection){
return(df %>% group_by_(group) %>% dplyr::select(one_of(selection)) %>% summarise_all(funs(mean)))
}
multistoremean <- function(multi){
group <- "Store"
selection <- c("Store","TrafficConversion","SalesConversion", "ATV", "UPT","ACV","PotentialShopper","Avg.ShopperDwell","RepeatCustomer")
multi_mean <- storesummary(multi, group, selection)
return(multi_mean)
}
multi_mean <- multistoremean(multi)
View(multi)
multi = read.table("C:/Users/user/Desktop/skyREC/demo/data/VF/hua_tai_multi_2_new.csv",sep=",",header=TRUE,encoding="big5")
View(multi)
multi_mean <- multistoremean(multi)
runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
shiny::runApp('GitHub/Data_analysis')
runApp('GitHub/Data_analysis')
runApp('C:/Users/user/Desktop/skyREC/deep-learning/trunk/ml/src/Shiny/Data_analysis_system_2.0')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
daily <- gfile()
library(gWidgets)
daily <- gfile()
cabinet = daily
cabinet_names <- unique(gsub("\\-.*","",colnames(cabinet[,nstart:ncol(cabinet)])))
index <- grepl(c("DwellTime|DwellTraffic|ShopperTouch"), colnames(cabinet))
ncab <- ncol(cabinet[,index])/3
nstart <- ncol(cabinet) - ncol(cabinet[,index]) + 1
daily <- gfile()
daily  <-read.table(daily,sep = ",",header = TRUE,encoding = "utf-8")
View(daily)
cabinet= daily
index <- grepl(c("DwellTime|DwellTraffic|ShopperTouch"), colnames(cabinet))
ncab <- ncol(cabinet[,index])/3
nstart <- ncol(cabinet) - ncol(cabinet[,index]) + 1
cabinet_names <- unique(gsub("\\-.*","",colnames(cabinet[,nstart:ncol(cabinet)])))
cabinet_names
daily  <-read.table(daily,sep = ",",header = TRUE,check.names = FALSE,encoding = "utf-8")
daily <- gfile()
daily  <-read.table(daily,sep = ",",header = TRUE,check.names = FALSE,encoding = "utf-8")
cabinet = daily
View(cabinet)
index <- grepl(c("DwellTime|DwellTraffic|ShopperTouch"), colnames(cabinet))
ncab <- ncol(cabinet[,index])/3
nstart <- ncol(cabinet) - ncol(cabinet[,index]) + 1
cabinet_names <- unique(gsub("\\-.*","",colnames(cabinet[,nstart:ncol(cabinet)])))
cabinet_names
cabinet_names[1]
cabinet_names[1] == "一樓主陳列4"
str(cabinet_names[1])
runApp()
runApp()
cabinet_names[1]
str(cabinet_names)
cabname = c("醜胖子","傻妹子")
str(cabname)
runApp()
ncab
length(cabinet_names)
`二樓壁面桿3-ShopperTouch`
colnames(cabinet)[50]
runApp()
colnames(cabinet[,nstart:ncol(cabinet)])
gsub("\\-.*","",colnames(cabinet[,nstart:ncol(cabinet)]))
gsub("\\-.*",colnames(cabinet[,nstart:ncol(cabinet)]))
unique(gsub("\\-.*",colnames(cabinet[,nstart:ncol(cabinet)])))
nstart
runApp()
paste0( colnames(cabinet[,nstart:ncol(cabinet)])[3*1+1],".png")
View(daily)
colnames(cabinet)[26]
colnames(cabinet)[25]
runApp()
daily <- gfile()
daily  <-read.table(daily,sep = ",",check.names = FALSE,header = TRUE,encoding = "utf-8")
cabinet = daily
index <- grepl(c("DwellTime|DwellTraffic|ShopperTouch"), colnames(cabinet))
ncab <- ncol(cabinet[,index])/3
nstart <- ncol(cabinet) - ncol(cabinet[,index]) + 1
nstart
sel_cabinet <- cbind(cabinet[,c("Weekday","Time")],cabinet[,nstart:ncol(cabinet)])
mean_cabinet <- sel_cabinet %>% group_by(Weekday,Time) %>% summarise_all(funs(mean))
mean_cabinet$Time = factor(unique(mean_cabinet$Time),ordered=TRUE)
mean_cabinet$Weekday = factor(mean_cabinet$Weekday,levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"),ordered=TRUE)
mean_cabinet <- data.frame(with(mean_cabinet, mean_cabinet[order(Weekday),]))
for(i in 0:ncab-1){
tmp_cabinet <- cbind(mean_cabinet[,c("Weekday","Time")],mean_cabinet[,(3*i):(3*i+2)])
tmp_name <- c("Weekday","Time","ShopperTouch","DwellTime","DwellTraffic")
colnames(tmp_cabinet) <- tmp_name
#
# # touch = enc2utf8(paste0(cabinet_names[i],"_ShopperTouch.png"))
# # time = enc2utf8(paste0(cabinet_names[i],"_DwellTime.png"))
# # traffic = enc2utf8(paste0(cabinet_names[i],"_DwellTraffic.png"))
# # print(touch)
# cabinet_names[1]
# str(cabinet_names)
# cabname = c("醜胖子5","傻妹2")
# str(cabname)
ggplot(tmp_cabinet,aes(Time,Weekday))+geom_point(aes(size=ShopperTouch), colour="green3")+theme_bw()+theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5))+ggtitle(cabinet_names[i])
ggsave(paste0(colnames(cabinet)[3*i+nstart],".png"),width=7,height=7)
ggplot(tmp_cabinet,aes(Time,Weekday))+geom_point(aes(size=DwellTime), colour="pink2")+theme_bw()+theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5))+ggtitle(cabinet_names[i])
ggsave(paste0(colnames(cabinet)[3*i+nstart+1],".png"),width=7,height=7)
ggplot(tmp_cabinet,aes(Time,Weekday))+geom_point(aes(size=DwellTraffic), colour="dodgerblue")+theme_bw()+theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5))+ggtitle(cabinet_names[i])
ggsave(paste0(colnames(cabinet)[3*i+nstart+2],".png"),width=7,height=7)
}
for(i in 0:ncab-1){
tmp_cabinet <- cbind(mean_cabinet[,c("Weekday","Time")],mean_cabinet[,(3*i):(3*i+2)])
tmp_name <- c("Weekday","Time","ShopperTouch","DwellTime","DwellTraffic")
colnames(tmp_cabinet) <- tmp_name
#
# # touch = enc2utf8(paste0(cabinet_names[i],"_ShopperTouch.png"))
# # time = enc2utf8(paste0(cabinet_names[i],"_DwellTime.png"))
# # traffic = enc2utf8(paste0(cabinet_names[i],"_DwellTraffic.png"))
# # print(touch)
# cabinet_names[1]
# str(cabinet_names)
# cabname = c("醜胖子5","傻妹2")
# str(cabname)
ggplot(tmp_cabinet,aes(Time,Weekday))+geom_point(aes(size=ShopperTouch), colour="green3")+theme_bw()+theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5))+ggtitle(colnames(cabinet)[3*i+nstart])
ggsave(paste0(colnames(cabinet)[3*i+nstart],".png"),width=7,height=7)
ggplot(tmp_cabinet,aes(Time,Weekday))+geom_point(aes(size=DwellTime), colour="pink2")+theme_bw()+theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5))+ggtitle(colnames(cabinet)[3*i+nstart])
ggsave(paste0(colnames(cabinet)[3*i+nstart+1],".png"),width=7,height=7)
ggplot(tmp_cabinet,aes(Time,Weekday))+geom_point(aes(size=DwellTraffic), colour="dodgerblue")+theme_bw()+theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5))+ggtitle(colnames(cabinet)[3*i+nstart])
ggsave(paste0(colnames(cabinet)[3*i+nstart+2],".png"),width=7,height=7)
}
for(i in 0:ncab-1){
tmp_cabinet <- cbind(mean_cabinet[,c("Weekday","Time")],mean_cabinet[,(3*i):(3*i+2)])
tmp_name <- c("Weekday","Time","ShopperTouch","DwellTime","DwellTraffic")
colnames(tmp_cabinet) <- tmp_name
#
# # touch = enc2utf8(paste0(cabinet_names[i],"_ShopperTouch.png"))
# # time = enc2utf8(paste0(cabinet_names[i],"_DwellTime.png"))
# # traffic = enc2utf8(paste0(cabinet_names[i],"_DwellTraffic.png"))
# # print(touch)
# cabinet_names[1]
# str(cabinet_names)
# cabname = c("醜胖子5","傻妹2")
# str(cabname)
ggplot(tmp_cabinet,aes(Time,Weekday))+geom_point(aes(size=ShopperTouch), colour="green3")+theme_bw()+theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5))+ggtitle(colnames(cabinet)[3*i+nstart])
ggsave(paste0(colnames(cabinet)[50],".png"),width=7,height=7)
# ggplot(tmp_cabinet,aes(Time,Weekday))+geom_point(aes(size=DwellTime), colour="pink2")+theme_bw()+theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5))+ggtitle(colnames(cabinet)[3*i+nstart])
# ggsave(paste0(colnames(cabinet)[3*i+nstart+1],".png"),width=7,height=7)
# ggplot(tmp_cabinet,aes(Time,Weekday))+geom_point(aes(size=DwellTraffic), colour="dodgerblue")+theme_bw()+theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(hjust = 0.5))+ggtitle(colnames(cabinet)[3*i+nstart])
# ggsave(paste0(colnames(cabinet)[3*i+nstart+2],".png"),width=7,height=7)
}
runApp()
runApp()
ggsave(paste0(colnames(cabinet)[nstart+3i],"_ShopperTouch.png"),width=7,height=7)
filename = paste0(filename_return(),".zip"),
content = function(fname) {
withProgress( value = 20,detail = 'This might take some time..',{
main()
setwd("c:/Users/asus/Documents/graph")
print(filename_return())
zip(zipfile=fname, files=filename_return())
})
do.call(unlink, list(filename_return(),recursive = T))
}
runApp()
runApp()
colnames(cabinet)[26]
runApp()
runApp()
runApp()
help(ggsave)
